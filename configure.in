dnl *******************************************
dnl *** Initialize automake and set version ***
dnl *******************************************

AC_PREREQ(2.53)
AC_INIT(openwsman, 1.3.0)
AC_CONFIG_SRCDIR(src/server/wsmand.c)

dnl Package version information
PACKAGE=openwsman
VERSION_MAJOR=1
VERSION_MINOR=2
VERSION_RELEASE=9
VERSION=${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_RELEASE}

AM_INIT_AUTOMAKE(${PACKAGE}, ${VERSION})

AM_CONFIG_HEADER(wsman_config.h)
AM_MAINTAINER_MODE
AC_PROG_MAKE_SET

WSMAN_PKG=wsman
WSMAN_CLIENT_PKG=${WSMAN_PKG}_client
WSMAN_CLIENT_TRANSPORT_PKG=${WSMAN_PKG}_curl_client_transport
WSMAN_CLIENTPP_PKG=${WSMAN_PKG}_clientpp
WSMAN_SERVER_PKG=${WSMAN_PKG}_server

AC_SUBST(WSMAN_UTILS_PKG)
AC_SUBST(WSMAN_CLIENT_PKG)
AC_SUBST(WSMAN_CLIENT_TRANSPORT_PKG)
AC_SUBST(WSMAN_CLIENTPP_PKG)
AC_SUBST(WSMAN_SERVER_PKG)
AC_SUBST(WSMAN_PKG)

dnl ***************************
dnl *** Set debugging flags ***
dnl ***************************

debug_default=minimum

# Declare --enable-* args and collect ac_help strings
AC_ARG_ENABLE(debug, 
	      [  --enable-debug=[no/minimum/yes] turn on debugging [default=$debug_default]],,
	      enable_debug=$debug_default)


# Set the debug flags
if test "x$enable_debug" = "xyes"; then
    test "$cflags_set" = set || CFLAGS="$CFLAGS "
    OWSMAN_DEBUG_FLAGS="-DOWSMAN_ENABLE_DEBUG"
    CFLAGS="$CFLAGS -DDEBUG_VERBOSE -g"
else
    if test "x$enable_debug" = "xno"; then
        OWSMAN_DEBUG_FLAGS="-DG_DISABLE_ASSERT -DG_DISABLE_CHECKS"
    fi
fi

# Set the debug flags
if test "x$enable_debug" = "xyes"; then
    AC_DEFINE(WSMAN_DEBUG_VERBOSE, 1, [Defined if verbose debug logging is requested])
fi
AC_SUBST(OWSMAN_DEBUG_FLAGS)

AC_ARG_ENABLE(more-warnings,
	      [  --disable-more-warnings  Inhibit compiler warnings],
	      set_more_warnings=no)

if test "$GCC" = "yes" -a "$set_more_warnings" != "no"; then
	CFLAGS="$CFLAGS \
		-Wall -Wstrict-prototypes -Wmissing-declarations \
		-Wmissing-prototypes -Wnested-externs -Wpointer-arith \
                -Wunused -Werror"
fi

eventing_default=no
AC_ARG_ENABLE(eventing,
		[  --enable-eventing=[no/yes] turn on WS-Eventing [default=no]],,
              enable_eventing=$eventing_default)
if test "x$enable_eventing" = "xyes"; then
    AC_DEFINE(ENABLE_EVENTING_SUPPORT, 1, [Defined if WS-Eventing wanted])
fi
AM_CONDITIONAL(ENABLE_EVENTING_SUPPORT, test "x$enable_eventing" = "xyes")

dnl copied from openwbem :)
use_pam=0       
AC_ARG_ENABLE(pam,
AC_HELP_STRING(--disable-pam,disable pam integration))
if test "$enable_pam" != no; then
        use_pam=1
        AC_CHECK_HEADERS(pam/pam_misc.h pam/pam_appl.h, true, use_pam=0)
        if test x$use_pam = x0; then
                AC_CHECK_HEADERS(security/pam_misc.h security/pam_appl.h,
                        use_pam=1, use_pam=0)
        fi
                
        if test x$use_pam = x1; then
                AC_DEFINE([HAVE_PAM], [1], [Defined if pam support is available])
                PAM_LIB="-lpam"
        else
                AC_MSG_WARN(*** No PAM headers found! The PAM authentication module ***)
                AC_MSG_WARN(*** will not be built. The config file defaults to      ***)
                AC_MSG_WARN(*** using PAM authentication.                           ***)
                AC_MSG_WARN(*** You must edit the config file and use a different   ***)
                AC_MSG_WARN(*** authentication module or else the daemon won't start***)
        fi
fi                      
AC_SUBST(PAM_LIB)
AM_CONDITIONAL(USE_PAM, test x$use_pam = x1)


dnl ***************************
dnl *** Checks for programs ***
dnl ***************************


AC_CHECK_FUNCS(strtok_r \
getpid \
strsep \
gettimeofday \
unlink \
syslog \
sleep \
fnmatch \
timegm \
daemon  \
va_copy \
memmove \
bcopy
)


# check for ssize_t
AC_CHECK_TYPE(ssize_t, int)

AC_PROG_CC
AM_PROG_CC_STDC
AC_PROG_INSTALL

# Set STDC_HEADERS
AC_HEADER_STDC

# Initialize libtool
AM_PROG_LIBTOOL

# This isn't a program, but it doesn't fit anywhere else...
AC_FUNC_ALLOCA



dnl *******************
dnl *** Misc checks ***
dnl *******************
AC_CHECK_FUNCS(gmtime_r)
dnl ----------------------------------------------------------------------
AC_CHECK_HEADERS([inttypes.h stdlib.h])
AC_CHECK_HEADERS([net/if.h net/if_dl.h])
AC_CHECK_HEADERS([sys/ioctl.h sys/sockio.h])
AC_CHECK_HEADERS([crypt.h sys/ioctl.h dirent.h])
AC_CHECK_HEADERS([vararg.h stdarg.h pthread.h])
AC_CHECK_HEADERS([unistd.h sys/types.h sys/sendfile.h sys/signal.h])
AC_CHECK_HEADERS([ctype.h sys/resource.h sys/socket.h sys/select.h])
AC_CHECK_HEADERS([netinet/in.h], [], [],
[#if HAVE_SYS_TYPES_H
# include <sys/types.h>
#endif
])

AC_HEADER_TIME
dnl Checks for types
AC_CHECK_TYPES([sa_family_t, in_port_t, in_addr_t], , ,
[
#if HAVE_SYS_TYPES_H
# include <sys/types.h>
#endif
#if HAVE_SYS_SOCKET_H
# include <sys/socket.h>
#endif
#if HAVE_NETINET_IN_H
# include <netinet/in.h>
#endif
#if HAVE_ARPA_NAMESER_H
# include <arpa/nameser.h>
#endif
])

    AC_CHECK_SIZEOF(short)
    AC_CHECK_SIZEOF(int)
    AC_CHECK_SIZEOF(long)
    AC_CHECK_SIZEOF(long long)
    SIZEOF_SHORT=$ac_cv_sizeof_short
    SIZEOF_INT=$ac_cv_sizeof_int
    SIZEOF_LONG=$ac_cv_sizeof_long
    SIZEOF_LONG_LONG=$ac_cv_sizeof_long_long
    AC_SUBST(SIZEOF_SHORT)
    AC_SUBST(SIZEOF_INT)
    AC_SUBST(SIZEOF_LONG)
    AC_SUBST(SIZEOF_LONG_LONG)
    AC_CHECK_FUNCS(srandom)
    AC_CHECK_MEMBER(struct sockaddr.sa_len,
                   AC_DEFINE_UNQUOTED(HAVE_SA_LEN,
                                       1,
                                       [Define if struct sockaddr contains sa_len]),,
                    [#include <sys/typesDD.h>
                     #include <sys/socket.h>])

dnl *********************************
dnl *** Networking library checks ***
dnl *********************************

AC_CHECK_FUNC(socket, , AC_CHECK_LIB(socket, socket))
AC_CHECK_FUNC(gethostbyname, , AC_CHECK_LIB(nsl, gethostbyname))
AC_CHECK_FUNCS(inet_pton inet_ntop inet_aton getaddrinfo getnameinfo)
AC_CACHE_CHECK(IPv6 support, soup_cv_ipv6, [
	AC_EGREP_HEADER(sockaddr_in6, netinet/in.h, soup_cv_ipv6=yes, soup_cv_ipv6=no)
])


PKG_CHECK_MODULES(XML, libxml-2.0)
    AC_SUBST(XML_CFLAGS)
    AC_SUBST(XML_LIBS)


AC_PATH_PROG(CURL_CONFIG, curl-config, no)
if test "$CURL_CONFIG" = "no" ; then
	AC_MSG_ERROR([the curl-config script installed by libcurl could not be found.  libcurl is required for tests.])
fi
CURL_CFLAGS=`curl-config --cflags`
CURL_LIBS=`curl-config --libs`
AC_SUBST(CURL_CFLAGS)
AC_SUBST(CURL_LIBS)


AC_PROG_SWIG(1.3.17)


AC_CHECK_PROG(PYTHON_CONFIG, python-config,yes)
if test "$PYTHON_CONFIG" = "yes" ; then
	PYTHON_CFLAGS=`python-config --cflags`
	PYTHON_LIBS=`python-config --libs`
	AC_SUBST(PYTHON_CFLAGS)
	AC_SUBST(PYTHON_LIBS)
fi


AC_ARG_ENABLE(ssl, 
              [  --enable-ssl             Turn on Secure Sockets Layer support [default=yes]],,
              enable_ssl=auto)

if test "$enable_ssl" != "no"; then
    PKG_CHECK_MODULES(OPENSSL, openssl , have_ssl="yes", have_ssl="no")
    AC_SUBST(OPENSSL_CFLAGS)
    AC_SUBST(OPENSSL_LIBS)
    if test "$have_ssl" != "yes"; then
        if test "$enable_ssl" = "auto"; then
            AC_MSG_WARN(Disabling SSL support);
            enable_ssl=no;
        else
            AC_MSG_ERROR(Could not configure SSL support);
        fi
    fi
fi

if test "$enable_ssl" != "no"; then
    AC_DEFINE(HAVE_SSL, 1, [Defined if you have SSL support])
fi
AM_CONDITIONAL(USE_OPENSSL, test "x$enable_ssl" != "xno")


AH_TEMPLATE(HAVE_LIBCRYPT, [libcrypt library present])
AC_CHECK_FUNCS([crypt], HAVE_LIBC_CRYPT="true")
if test -z "$HAVE_LIBC_CRYPT"; then
       AC_CHECK_LIB(crypt, crypt,
             CRYPT_LIBS="-lcrypt"
             [AC_DEFINE(HAVE_LIBCRYPT)], ,)
fi

AC_SUBST(CRYPT_LIBS)


if test "$prefix" = "NONE"; then
    prefix=$ac_default_prefix;
fi
SYSCONFDIR_TMP="`eval echo $sysconfdir`"
AC_DEFINE_UNQUOTED([DEFAULT_CONFIG_FILE], ["${SYSCONFDIR_TMP}/openwsman/openwsman.conf"] , [Default config file])
SYSCONFDIR=${sysconfdir}/openwsman

test "$localstatedir" = '${prefix}/var' && localstatedir=/var || localstatedir=$localstatedir
dnl Subst PACKAGE_PLUGIN_DIR.
packagesubscriptiondir="${localstatedir}"/lib/${PACKAGE}/subscriptions
PACKAGE_SUBSCRIPTION_DIR="${packagesubscriptiondir}"
AC_SUBST(PACKAGE_SUBSCRIPTION_DIR)

dnl Subst PACKAGE_PLUGIN_DIR.
packageplugindir=$libdir/${PACKAGE}/plugins
PACKAGE_PLUGIN_DIR="${packageplugindir}"
AC_SUBST(PACKAGE_PLUGIN_DIR)

dnl Subst PACKAGE_AUTH_DIR.
packageauthdir=$libdir/${PACKAGE}/authenticators
PACKAGE_AUTH_DIR="${packageauthdir}"
AC_SUBST(PACKAGE_AUTH_DIR)

AC_SUBST(PACKAGE)
AC_SUBST(VERSION)
AC_SUBST(VERSION_MAJOR)
AC_SUBST(VERSION_MINOR)
AC_SUBST(VERSION_RELEASE)



AC_CHECK_LIB([cmpisfcc],  [cmciConnect], [have_sfcc="yes"],[have_sfcc="no"])
AM_CONDITIONAL(BUILD_LIBCIM, test "$have_sfcc" = "yes" )

have_cunit=no
AC_CHECK_HEADERS([CUnit/Basic.h], have_cunit="yes" )

AM_CONDITIONAL(BUILD_CUNIT_TESTS, test "$have_cunit" = "yes")

AC_ARG_ENABLE(server,
AC_HELP_STRING(--disable-server,disable server))

OWMAN_DISABLE_SERVER=0
if test "$enable_server" = no; then
        OWMAN_DISABLE_SERVER=1
fi
AM_CONDITIONAL(DISABLE_SERVER, test x$OWMAN_DISABLE_SERVER = x1)

AC_ARG_ENABLE(plugins,
AC_HELP_STRING(--disable-plugins,disable plugins))

OWMAN_DISABLE_PLUGINS=0
if test "$enable_plugins" = no; then
        OWMAN_DISABLE_PLUGINS=1
fi
AM_CONDITIONAL(DISABLE_PLUGINS, test x$OWMAN_DISABLE_PLUGINS = x1)




dnl *************************
dnl *** Output Everything ***
dnl *************************
AC_SUBST(SYSCONFDIR)

AC_CONFIG_FILES([
        openwsman.pc
        openwsman++.pc
        openwsman-server.pc
        openwsman.spec])

AC_OUTPUT([
        Doxyfile
        Makefile
        src/Makefile
        src/server/Makefile
        src/lib/Makefile
        src/plugins/Makefile
        src/plugins/cim/Makefile
        src/plugins/identify/Makefile
        src/plugins/wsman/Makefile
        src/plugins/wsman/test/Makefile
        src/authenticators/Makefile
        src/authenticators/file/Makefile
        src/authenticators/pam/Makefile
        src/cpp/Makefile
        include/Makefile
        include/cim/Makefile
        include/u/Makefile
        src/lib/test/Makefile
        doc/Makefile
        doc/specs/Makefile
        etc/Makefile
        etc/owsmangencert.sh
        etc/init/Makefile
        etc/init/wsmand.sh
        tests/Makefile
        tests/client/Makefile
        tests/xml/Makefile
        examples/Makefile
	python/Makefile
	])
