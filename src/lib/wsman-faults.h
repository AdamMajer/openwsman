/*******************************************************************************
 * Copyright (C) 2004-2006 Intel Corp. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *  - Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 *  - Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 *  - Neither the name of Intel Corp. nor the names of its
 *    contributors may be used to endorse or promote products derived from this
 *    software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS''
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL Intel Corp. OR THE CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *******************************************************************************/

/**
 * @author Anas Nashif
 */

#ifndef WSMANFAULTS_H_
#define WSMANFAULTS_H_

#define FAULT_SENDER_CODE "Sender"
#define FAULT_RECEIVER_CODE "Receiver"

enum __WsmanFaultCodeType 
{	
    WSMAN_RC_OK = 0,
    WSMAN_FAULT_ACCESS_DENIED,
    WSMAN_FAULT_AMBIGUOUS_SELECTORS,
    WSMAN_FAULT_ALREADY_EXISTS,
    WSMAN_FAULT_CONCURRENCY,
    WSMAN_FAULT_ENCODING_LIMIT,
    WSMAN_FAULT_DELIVERY_REFUSED,
    WSMAN_FAULT_INTERNAL_ERROR,
    WSMAN_FAULT_INVALID_HEADER,
    WSMAN_FAULT_INVALID_BOOKMARK,    
    WSMAN_FAULT_INVALID_OPTIONS,
    WSMAN_FAULT_INVALID_PARAMERTERS,    
    WSMAN_FAULT_INVALID_SELECTORS,
    WSMAN_FAULT_INVALID_TIMEOUT,
    WSMAN_FAULT_QUOTA_LIMIT,    
    WSMAN_FAULT_MINIMUM_ENVELOPE_LIMIT,
    WSMAN_FAULT_RENAME_FAILURE,
    WSMAN_FAULT_RESOURCE_OFFLINE,
    WSMAN_FAULT_SCHEMA_VALIDATION_ERROR,
    WSMAN_FAULT_SYSTEM_OFFLINE,
    WSMAN_FAULT_TIMED_OUT,
    WSMAN_FAULT_UNSUPPORTED_FEATURE,
    // WS-Transfer
    WXF_FAULT_INVALID_REPRESENTATION,

    // WS-Addressing
    /** wsa:InvalidMessageInformationHeader */
    WSA_FAULT_INVALID_MESSAGE_INFORMATION_HEADER,
    /** wsa:DestinationUnreachable */
    WSA_FAULT_DESTINATION_UNREACHABLE,
    /** wsa:ActionNotSupported */
    WSA_FAULT_ACTION_NOT_SUPPORTED,
    /** wsa:MessageInformationHeaderRequired */
    WSA_FAULT_MESSAGE_INFORMATION_HEADER_REQUIRED,
    /** wsa:EndpointUnavailable */
    WSA_FAULT_ENDPOINT_UNAVAILABLE,
    // SOAP	

    SOAP_FAULT_VERSION_MISMATCH,
    // MustUnderstand
    SOAP_FAULT_MUSTUNDERSTAND,

    // WSEN
    WSEN_FAULT_INVALID_ENUMERATION_CONTEXT,
    WSMAN_FAULT_UNKNOWN
};
typedef enum  __WsmanFaultCodeType WsmanFaultCodeType;

enum __WsmanFaultDetailType 
{
    WSMAN_DETAIL_OK = 0,
    WSMAN_FAULT_DETAIL_ACK,
    WSMAN_FAULT_DETAIL_ACTION_MISMATCH,
    WSMAN_FAULT_DETAIL_ALREADY_EXISTS,
    WSMAN_FAULT_DETAIL_AMBIGUOUS_SELECTORS,
    WSMAN_FAULT_DETAIL_ASYNCHRONOUS_REQUEST,
    WSMAN_FAULT_DETAIL_AUTHERIZATION_MODE,
    WSMAN_FAULT_DETAIL_BOOKMARKS,
    WSMAN_FAULT_DETAIL_CHARECHTER_SET,
    WSMAN_FAULT_DETAIL_DELIVERY_RETRIES,
    WSMAN_FAULT_DETAIL_DUPLICATE_SELECTORS,
    WSMAN_FAULT_DETAIL_ENCODING_TYPE,
    WSMAN_FAULT_DETAIL_ENUMERATION_MODE,
    WSMAN_FAULT_DETAIL_EXPIRATION_TIME,
    WSMAN_FAULT_DETAIL_EXPIRED,
    WSMAN_FAULT_DETAIL_FILTERING_REQUIRED,
    WSMAN_FAULT_DETAIL_FORMAT_MISMATCH,
    WSMAN_FAULT_DETAIL_FORMAT_SECURITY_TOKEN,
    WSMAN_FAULT_DETAIL_FRAGMENT_LEVEL_ACCESS,
    WSMAN_FAULT_DETAIL_HEARTBEATS,
    WSMAN_FAULT_DETAIL_INSECURE_ADDRESS,
    WSMAN_FAULT_DETAIL_INSUFFICIENT_SELECTORS,
    WSMAN_FAULT_DETAIL_INVALID,
    WSMAN_FAULT_DETAIL_INVALID_ADDRESS,
    WSMAN_FAULT_DETAIL_INVALID_FORMAT,
    WSMAN_FAULT_DETAIL_INVALID_FRAGMENT,
    WSMAN_FAULT_DETAIL_INVALID_NAME,
    WSMAN_FAULT_DETAIL_INVALID_NAMESPACE,
    WSMAN_FAULT_DETAIL_INVALID_RESOURCEURI,
    WSMAN_FAULT_DETAIL_INVALID_SELECTOR_ASSIGNMENT,
    WSMAN_FAULT_DETAIL_INVALID_SYSTEM,
    WSMAN_FAULT_DETAIL_INVALID_TIMEOUT,
    WSMAN_FAULT_DETAIL_INVALID_VALUE,
    WSMAN_FAULT_DETAIL_INVALID_VALUES,
    WSMAN_FAULT_DETAIL_LOCALE,
    WSMAN_FAULT_DETAIL_MAX_ELEMENTS,
    WSMAN_FAULT_DETAIL_MAX_ENVELOPE_POLICY,
    WSMAN_FAULT_DETAIL_MAX_ENVELOPE_SIZE,
    WSMAN_FAULT_DETAIL_MAX_ENVELOPE_SIZE_EXCEEDED,
    WSMAN_FAULT_DETAIL_MAX_TIME,
    WSMAN_FAULT_DETAIL_MINIMUM_ENVELOPE_LIMIT,
    WSMAN_FAULT_DETAIL_MISSING_VALUES,
    WSMAN_FAULT_DETAIL_NOT_SUPPORTED,
    WSMAN_FAULT_DETAIL_OPERATION_TIMEOUT,
    WSMAN_FAULT_DETAIL_OPTION_LIMIT,
    WSMAN_FAULT_DETAIL_OPTION_SET,
    WSMAN_FAULT_DETAIL_READ_ONLY,
    WSMAN_FAULT_DETAIL_RESOURCE_OFFLINE,
    WSMAN_FAULT_DETAIL_RENAME,
    WSMAN_FAULT_DETAIL_SELECTOR_LIMIT,
    WSMAN_FAULT_DETAIL_SERVICE_ENVELOPE_LIMIT,
    WSMAN_FAULT_DETAIL_TARGET_ALREADY_EXISTS,
    WSMAN_FAULT_DETAIL_TYPE_MISMATCH,
    WSMAN_FAULT_DETAIL_UNEXPECTED_SELECTORS,
    WSMAN_FAULT_DETAIL_UNREPORTABLE_SUCCESS,
    WSMAN_FAULT_DETAIL_UNUSABLE_ADDRESS,
    WSMAN_FAULT_DETAIL_URI_LIMIT_EXCEEDED,
    WSMAN_FAULT_DETAIL_WHITESPACE,

    // WS-Addressing
    WSA_FAULT_DETAIL_DUPLICATE_MESSAGE_ID,

    // SOAP
    SOAP_FAULT_DETAIL_HEADER_NOT_UNDERSTOOD,

    // OpenWSMAN 
    OWSMAN_FAULT_DETAIL_ENDPOINT_ERROR,
    OWSMAN_FAULT_NO_DETAILS
};
typedef enum __WsmanFaultDetailType WsmanFaultDetailType;


typedef enum {
    WSMAN_STATUS_NONE,

    /* Transport Errors */
    WSMAN_STATUS_CANCELLED                       = 1,
    WSMAN_STATUS_CANT_RESOLVE,
    WSMAN_STATUS_CANT_RESOLVE_PROXY,
    WSMAN_STATUS_CANT_CONNECT,
    WSMAN_STATUS_CANT_CONNECT_PROXY,
    WSMAN_STATUS_SSL_FAILED,
    WSMAN_STATUS_IO_ERROR,
    WSMAN_STATUS_MALFORMED,
    WSMAN_STATUS_TRY_AGAIN,

    /* HTTP Status Codes */
    WSMAN_STATUS_CONTINUE                        = 100,
    WSMAN_STATUS_SWITCHING_PROTOCOLS             = 101,
    WSMAN_STATUS_PROCESSING                      = 102, /* WebDAV */

    WSMAN_STATUS_OK                              = 200,
    WSMAN_STATUS_CREATED                         = 201,
    WSMAN_STATUS_ACCEPTED                        = 202,
    WSMAN_STATUS_NON_AUTHORITATIVE               = 203,
    WSMAN_STATUS_NO_CONTENT                      = 204,
    WSMAN_STATUS_RESET_CONTENT                   = 205,
    WSMAN_STATUS_PARTIAL_CONTENT                 = 206,
    WSMAN_STATUS_MULTI_STATUS                    = 207, /* WebDAV */

    WSMAN_STATUS_MULTIPLE_CHOICES                = 300,
    WSMAN_STATUS_MOVED_PERMANENTLY               = 301,
    WSMAN_STATUS_FOUND                           = 302,
    WSMAN_STATUS_MOVED_TEMPORARILY               = 302, /* RFC 2068 */
    WSMAN_STATUS_SEE_OTHER                       = 303,
    WSMAN_STATUS_NOT_MODIFIED                    = 304,
    WSMAN_STATUS_USE_PROXY                       = 305,
    WSMAN_STATUS_NOT_APPEARING_IN_THIS_PROTOCOL  = 306, /* (reserved) */
    WSMAN_STATUS_TEMPORARY_REDIRECT              = 307,

    WSMAN_STATUS_BAD_REQUEST                     = 400,
    WSMAN_STATUS_UNAUTHORIZED                    = 401,
    WSMAN_STATUS_PAYMENT_REQUIRED                = 402, /* (reserved) */
    WSMAN_STATUS_FORBIDDEN                       = 403,
    WSMAN_STATUS_NOT_FOUND                       = 404,
    WSMAN_STATUS_METHOD_NOT_ALLOWED              = 405,
    WSMAN_STATUS_NOT_ACCEPTABLE                  = 406,
    WSMAN_STATUS_PROXY_AUTHENTICATION_REQUIRED   = 407,
    WSMAN_STATUS_PROXY_UNAUTHORIZED              = WSMAN_STATUS_PROXY_AUTHENTICATION_REQUIRED,
    WSMAN_STATUS_REQUEST_TIMEOUT                 = 408,
    WSMAN_STATUS_CONFLICT                        = 409,
    WSMAN_STATUS_GONE                            = 410,
    WSMAN_STATUS_LENGTH_REQUIRED                 = 411,
    WSMAN_STATUS_PRECONDITION_FAILED             = 412,
    WSMAN_STATUS_REQUEST_ENTITY_TOO_LARGE        = 413,
    WSMAN_STATUS_REQUEST_URI_TOO_LONG            = 414,
    WSMAN_STATUS_UNSUPPORTED_MEDIA_TYPE          = 415,
    WSMAN_STATUS_REQUESTED_RANGE_NOT_SATISFIABLE = 416,
    WSMAN_STATUS_INVALID_RANGE                   = WSMAN_STATUS_REQUESTED_RANGE_NOT_SATISFIABLE,
    WSMAN_STATUS_EXPECTATION_FAILED              = 417,
    WSMAN_STATUS_UNPROCESSABLE_ENTITY            = 422, /* WebDAV */
    WSMAN_STATUS_LOCKED                          = 423, /* WebDAV */
    WSMAN_STATUS_FAILED_DEPENDENCY               = 424, /* WebDAV */

    WSMAN_STATUS_INTERNAL_SERVER_ERROR           = 500,
    WSMAN_STATUS_NOT_IMPLEMENTED                 = 501,
    WSMAN_STATUS_BAD_GATEWAY                     = 502,
    WSMAN_STATUS_SERVICE_UNAVAILABLE             = 503,
    WSMAN_STATUS_GATEWAY_TIMEOUT                 = 504,
    WSMAN_STATUS_HTTP_VERSION_NOT_SUPPORTED      = 505,
    WSMAN_STATUS_INSUFFICIENT_STORAGE            = 507, /* WebDAV search */
    WSMAN_STATUS_NOT_EXTENDED                    = 510  /* RFC 2774 */
} WsmanKnownStatusCode;


void add_details_proc(WsXmlNodeH fault,  void* data);
int wsman_is_fault(WsXmlDocH doc);
#endif /*WSMANFAULTS_H_*/
