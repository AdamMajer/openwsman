

How to run openwsman from CVS? (Valid for version 0.09)
===============================

After checking out the project from CVS run ./autoconfiscate in the TOP directory and 
follow that by running ./configure <options>.
If you download a packaged version, then there is no need to run ./autoconfiscate and you will
be able to run ./configure directly.

Most likely you will need to install some of the packages, depending on the distribution
you are running.

Packages and other software needed:

- libxml2
- glib version 2.8 or higher 
- gnutls
- sfcc (from the sblim project)
- other development packages like autoconf, automake etc.

After all packages are installed, compile everything and install. The server can run as
a daemon, which would require root access; But it can be run in the foreground with debugging
messages printed to stdout as well. This the help output when you run:

% /usr/local/sbin/wsmand --help
Usage:
  wsmand [OPTION...] WS-Management Server

Help Options:
  -?, --help                   Show help options

Application Options:
  -n, --no-plugins             Do not load any plugins
  -d, --debug                  Start daemon in foreground and turn on debugging
  -s, --syslog=0-6             Set the verbosity of syslog output.
  -c, --config-file=<file>     Alternate configuration file


Starting from version 0.1.1 a configuration file is needed. you can find an example in the 
./etc directory. The configuration file has the following syntax:

[server]
port = 8889
#ssl_port = 8888
ssl_cert_file = /etc/openwsman/servercert.pem
ssl_key_file = /etc/openwsman/serverkey.pem
digest_password_file = /etc/openwsman/digest_auth.passwd
basic_password_file = /etc/openwsman/simple_auth.passwd
use_digest = false
[client]
agent = Openwsman 0.1
port = 8889


To be able to put the configuration files under /etc/openwsman, run the configure script
with the --sysconfdir option using the value /etc. If this option is not used, the default will
be under PREFIX (/usr/local/etc ).

To run in SSL mode you need to enable the SSL port and create certificates and adapt the configuration
with the correct path to the files.

To start the server in the foreground, run:

% /usr/local/sbin/wsmand  -d

You can also specify the configuration file to be used on the command line using the -c option.

If all went ok, you should see all debug message on the screen and tha last message would be:

..... Waiting for requests...


On the client side, which has the following options

 % /usr/local/bin/wsman --help-all
Usage:
  wsman [OPTION...] <action> <Resource Uri>

Help Options:
  -?, --help                                      Show help options
  --help-all                                      Show all help options
  --help-enumeration                              Enumeration Options
  --help-tests                                    Test Cases
  --help-flags                                    Request Flags

Enumeration
  -m, --max-elements=<max number of elements>     Max Elements Per Pull/Optimized Enumeration
  -o, --optimize                                  Optimize enumeration results
  -E, --estimate-count                            Return estimation of total items
  -M, --enum-mode=epr|objepr                      Enumeration Mode

Tests
  -f, --from-file=<file name>                     Send request from file
  -R, --print-request                             print request on stdout

Flags
  -x, --filter=<filter>                           Filter
  -D, --dialect=<dialect>                         Filter Dialect
  -t, --timeout=<time in sec>                     Operation timeout in seconds
  -e, --max-envelope-size=<size>                  maximal envelope size
  -F, --fragment=<fragment>                       Fragment (Supported Dialects: XPATH)

Application Options:
  -d, --debug=1-6                                 Set the verbosity of debugging output.
  -c, --cafile=<filename>                         Certificate file
  -u, --username=<username>                       User name
  -g, --path=<path>                               Path
  -p, --password=<password>                       Password
  -h, --hostname=<hostname>                       Host name
  -P, --port=<port>                               Server Port
  -a, --method=<custom method>                    Method (Works only with 'invoke')
  -k, --prop=<key=val>                            Properties with key value pairs (For 'put', 'invoke' and 'create')
  -C, --config-file=<file>                        Alternate configuration file


Note that the default user 'wsman' will not work any more. We are now using a password file for both BASIC and DIGEST
authentication. To create a password file, use the htpasswd and htdigest utilities from the apache distribution.

You can connect to the server with the following command, which is part of the DMTF WS-Management specification (Draft)

wsman identify    -h <hostname> --port 8889 -u wsman --password secret


The above command should have the following result:


<?xml version="1.0" encoding="UTF-8"?>
<s:Envelope xmlns:s="http://www.w3.org/2003/05/soap-envelope" xmlns:wsmid="http://schemas.dmtf.org/wbem/wsman/identity/1/wsmanidentity.xsd">
  <s:Header/>
  <s:Body>
    <wsmid:IdentifyResponse>
      <wsmid:ProtocolVersion>http://schemas.dmtf.org/wbem/wsman/1/wsman.xsd</wsmid:ProtocolVersion>
      <wsmid:ProductVendor>openwsman</wsmid:ProductVendor>
      <wsmid:ProductVersion>0.10</wsmid:ProductVersion>
    </wsmid:IdentifyResponse>
  </s:Body>
</s:Envelope>










