Open Test Manager

======
README
======

1. Information
2. Setup
3. How to create a new test case
4. Usage

================
1. Information
================

The Open Test Manager (OpenTestMan) can run on both Windows and Linux platforms.
It is implemented as a Bash Shell script, so it has a dependency on cygwin in
the Windows platform and on Linux platform it uses the bash shell.

Please visit the following link for more details on cygwin
  http://www.cygwin.com/

========
2. Setup
========

Extract (unzip or untar) the compressed tool to any directory
Following is the file structure of the tool

(dir)  results			[test results are stored here in html format]
(dir)  tests			[test case directory]
(dir)  etc			[supporting scripts & config files]
(file) opentestman.sh		[tool executable]
(file) README			[this file]
(file) INSTALL			[installation instructions]
(file) AUTHORS			[authors list]
(file) VERSION			[product version]
(file) COPYING			[license agreement]

================================
3. How to create a new test case
================================

1. Create a directory anywhere, preferably under [tests]
   mkdir mytestcase

2. Under the mytestcase directory, create a file named command.txt

3. Enter the command that you want to execute on a single line in command.txt
   for example: 
     ex1: wsman --help
     ex2: wsman -C /usr/local/etc/openwsman/openwsman.conf -h 192.168.1.101 --port 8889 -u wsman -p secret enumerate http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_ComputerSystem
     exn: any command

4. Currently 2 levels of command results processing is implemented.

   level 1. the ouput of the above command is compared [one line
            at a time] with the given "expected-output.txt" file.
            expected-output.txt should be in the same directory as command.txt

   Note: you can tell the tool to ignore the basic text comparision
         by droping a file named "ignore_basictext_comparision" in
         the same directory as command.txt

   level 2. level 2 facilitates advanced text processing, test case
            writer can add their own custom scripts in a file named "testresults.sh".
            testresults.sh will be provided with the output from the command in command.txt
            as a file. Test case writers will decide the pass|fail from with in testresults.sh and
            return 0 for pass and 1 for fail, before exiting the testresults.sh

            example: output from command.txt is stored in stdout.txt and then passed to level 2
                     testresults.sh stdout.txt

5. This is how a test case directory will look like

Example 1: only level 1 comparision

 - command.txt			[required]
 - description.txt		[optional : contains description of the testcase]
 - expected-output.txt		[required : contains the expected output from the command]

Example 2 : level 2 comparision

 - command.txt			[required]
 - description.txt		[optional : contains description of the testcase]
 - ignore_basictext_comparision	[required : empty file]
 - testresults.sh		[required : scripts that determices pass|fail]

Example 3 : both leve1 and level 2 comparision

 - command.txt			[required]
 - description.txt		[optional : contains description of the testcase]
 - expected-output.txt		[required : contains the expected output from the command]
 - testresults.sh		[required : scripts that determices pass|fail]

========
4. Usage
========

  Example 1:  run testcase from the default tests directory
  ./opentestman.sh
 
  Example 2:  run testcases from the non-default directory, testcasedir should be supplied
  ./opentestman.sh testcasedir

