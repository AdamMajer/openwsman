/*******************************************************************************
 * Copyright (C) 2004-2006 Dell Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *  - Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 *  - Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 *  - Neither the name of Dell Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived from this
 *    software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS''
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL Intel Corp. OR THE CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *******************************************************************************/

/**
 * @author Pritesh Prabhu
 */

package otm.httpslinger;

import java.net.InetAddress;
import java.net.Socket;
import java.io.OutputStreamWriter;
import java.io.InputStreamReader;
import java.io.BufferedWriter;
import java.io.BufferedReader;
import java.util.StringTokenizer;

import java.io.File;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileNotFoundException;
import java.io.IOException;

import jargs.gnu.CmdLineParser;

public class HttpSlinger {

	private String url;
	private int port;
	private String servlet;
	private String username;
	private String password;
	private String inputFile;
	private boolean stripHttp;

	HttpSlinger(String url, int port, String servlet, String username, String password, String inputFile)
	{
		this.url = url;
		this.port = port;
		this.servlet = servlet;
		this.username = username;
		this.password = password;
		this.inputFile = inputFile;
		this.stripHttp = false;
	}

	public void stripHttp(boolean stripHttp)
	{
		this.stripHttp = stripHttp;
	}

	private String getRealm(String data) {
		String realm = "";

		try {
			// Create a socket to the host
			InetAddress addr = InetAddress.getByName(url);
			Socket socket = new Socket(addr, port);
		    
			// Send header
			BufferedWriter wr = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream(), "UTF8"));
			wr.write("POST /"+servlet+" HTTP/1.1\r\n");
			wr.write("Host: "+url+":"+port+"\r\n");
			wr.write("Accept: */*\r\n");
			wr.write("Content-Length: "+data.length()+"\r\n");
			wr.write("Content-Type: application/soap+xml;charset=UTF-8\r\n");
			wr.write("\r\n");
		    
			// Send data
			wr.write(data);
			wr.flush();
    
			// Get response
			BufferedReader rd = new BufferedReader(new InputStreamReader(socket.getInputStream()));
			String line;
			while ((line = rd.readLine()) != null) {
//				System.out.println(line);
				if(-1 != line.indexOf("realm"))
				{
					StringTokenizer st = new StringTokenizer(line);
					while (st.hasMoreTokens()) {
						String token = st.nextToken();
						if(-1 != token.indexOf("realm")) {
							realm = token.substring(token.indexOf("realm")+7, token.length()-1);
						}
					}
				}
			}
			wr.close();
			rd.close();
			
		    } catch (Exception e) {
			e.printStackTrace();
		}
		return realm;
	}

	public void postData() {

		String data = getInputFileContents();
//		System.out.println(data);
		String realm = getRealm(data);

		try {
			// Create a socket to the host
			InetAddress addr = InetAddress.getByName(url);
			Socket socket = new Socket(addr, port);

			// Send header
			BufferedWriter wr = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream(), "UTF-8"));
			wr.write("POST /"+servlet+" HTTP/1.1\r\n");
			wr.write("Authorization: Basic "+ Base64Coder.encode(username+":"+password)+"\r\n");
			wr.write("Host: "+url+":"+port+"\r\n");
			wr.write("Accept: */*\r\n");
			wr.write("Content-Type: application/soap+xml;charset=UTF-8\r\n");
			wr.write("Content-Length: "+data.length()+"\r\n");
			wr.write("User-Agent: openwsman 0.4.1\r\n");
			wr.write("\r\n");
			
			// Send data
			wr.write(data);
			wr.flush();
    
			// Get response
			BufferedReader rd = new BufferedReader(new InputStreamReader(socket.getInputStream()));
			String line;
			while ((line = rd.readLine()) != null) {
				if(stripHttp && !line.startsWith("<"))
					continue;
				System.out.println(line);
			}
			wr.close();
			rd.close();
		    } catch (Exception e) {
			e.printStackTrace();
		    } 
	}

	private String getInputFileContents() {
	    //...checks on aFile are elided
	    StringBuffer contents = new StringBuffer();

	    //declared here only to make visible to finally clause
	    BufferedReader input = null;
	    try {
	      //use buffering, reading one line at a time
	      //FileReader always assumes default encoding is OK!
	      input = new BufferedReader( new FileReader(inputFile) );
	      String line = null; //not declared within while loop
	      /*
	      * readLine is a bit quirky :
	      * it returns the content of a line MINUS the newline.
	      * it returns null only for the END of the stream.
	      * it returns an empty String if two newlines appear in a row.
	      */
	      while (( line = input.readLine()) != null){
		contents.append(line);
		contents.append(System.getProperty("line.separator"));
	      }
	    }
	    catch (FileNotFoundException ex) {
	      ex.printStackTrace();
		System.exit(2);                                                     
	    }
	    catch (IOException ex){
	      ex.printStackTrace();
		System.exit(2);                                                     
	    }
	    finally {
	      try {
		if (input!= null) {
		  //flush and close both "input" and its underlying FileReader
		  input.close();
		}
	      }
	      catch (IOException ex) {
		ex.printStackTrace();
		System.exit(2);                                                     
	      }
	    }
	    return contents.toString();
	}
	
	public static void main(String[] args)
	{
		CmdLineParser parser = new CmdLineParser();                             
		CmdLineParser.Option urlOption = parser.addStringOption("url");     
		CmdLineParser.Option portOption = parser.addIntegerOption("port"); 
		CmdLineParser.Option servletOption = parser.addStringOption("servlet");       
		CmdLineParser.Option usernameOption = parser.addStringOption("username");
		CmdLineParser.Option passwordOption = parser.addStringOption("password");       
		CmdLineParser.Option filenameOption = parser.addStringOption("file");
		CmdLineParser.Option stripHttpOption = parser.addBooleanOption("striphttp");

		try {                                                                   
			parser.parse(args);                                                 
		}                                                                       
		catch ( CmdLineParser.OptionException e ) {                             
			System.err.println(e.getMessage());                                 
			printUsage();                                                       
			System.exit(2);                                                     
		}

		String url = (String)parser.getOptionValue(urlOption);
		Integer port = (Integer)parser.getOptionValue(portOption);
		String servlet = (String)parser.getOptionValue(servletOption);
		String username = (String)parser.getOptionValue(usernameOption);
		String password = (String)parser.getOptionValue(passwordOption);
		String filename = (String)parser.getOptionValue(filenameOption);
		Boolean stripHttpValue = (Boolean)parser.getOptionValue(stripHttpOption, Boolean.FALSE);                 

		if( null == url
			|| null == servlet
			|| null == port
			|| null == username
			|| null == password
			|| null == filename)
		{
			System.out.println("Please provide all required command-line arguments");
			printUsage();                                                       
			System.exit(2);                                                     
		}

		HttpSlinger request = new HttpSlinger(url, port.intValue(), servlet, username, password, filename);
		request.stripHttp(stripHttpValue.booleanValue());
		request.postData();
	}

	private static void printUsage()
	{
		System.out.println("Usage: HttpSlinger <{--url} aUrl> <{--port} aPort> <{--servlet} aServlet>");
		System.out.println("                   <{--username} aUsername> <{--password} aPassword> <{--file} inputfile>");
		System.out.println("                   [{--striphttp}]");
	}
}


